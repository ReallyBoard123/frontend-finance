generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                String            @id @default(cuid())
  code              String            @unique
  name              String
  parentId          String?
  parent            Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[]        @relation("CategoryHierarchy")
  transactions      Transaction[]
  budgets           Json?             // Flexible structure for yearly budgets
  isLeaf            Boolean           @default(true)
  color             String?
  metadata          Json?             // For additional custom fields
  accountMappings   AccountMapping[]
  categoryBudgets   CategoryBudget[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([parentId])
}

model SpecialCategory {
  id                String            @id @default(cuid())
  code              String            @unique  // The special code (e.g., "600", "23152")
  name              String
  description       String?
  type              String            // "ALLOCATION", "PAYMENT", etc.
  excludeFromTotals Boolean           @default(true)
  metadata          Json?
  transactions      Transaction[]     @relation("SpecialCategoryTransactions")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([type])
  @@index([code])
}

model Transaction {
  id                String            @id
  projectCode       String
  year              Int
  amount            Float
  internalCode      String
  description       String
  costGroup         String?
  transactionType   String
  documentNumber    String?
  bookingDate       DateTime
  personReference   String?
  details           String?
  invoiceDate       DateTime?
  invoiceNumber     String?
  paymentPartner    String?
  internalAccount   String?
  accountLabel      String?
  processed         Boolean           @default(false)
  status            String            @default("unprocessed")
  metadata          Json?
  
  // Category relationships - both are optional
  categoryId        String?
  category          Category?         @relation(fields: [categoryId], references: [id])
  
  specialCategoryId String?
  specialCategory   SpecialCategory?  @relation("SpecialCategoryTransactions", fields: [specialCategoryId], references: [id])
  
  // Related records
  logs              TransactionLog[]
  inquiries         TransactionInquiry[]

  @@index([year])
  @@index([internalCode])
  @@index([categoryId])
  @@index([specialCategoryId])
  @@index([bookingDate])
  @@index([status])
  @@index([documentNumber])
}

model TransactionInquiry {
  id            String      @id @default(cuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  note          String
  status        String      @default("pending")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([status])
  @@index([transactionId])
}

model AccountMapping {
  id            String    @id @default(cuid())
  internalCode  String    @unique
  description   String
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([categoryId])
}

model CategoryBudget {
  id          String    @id @default(cuid())
  categoryId  String
  year        Int
  amount      Float
  spent       Float     @default(0)
  remaining   Float     @default(0)
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([categoryId, year])
  @@index([year])
}

model TransactionLog {
  id            String      @id @default(cuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  action        String
  previousState Json?
  currentState  Json?
  note          String?
  performedBy   String
  createdAt     DateTime    @default(now())

  @@index([transactionId])
  @@index([action])
  @@index([createdAt])
}